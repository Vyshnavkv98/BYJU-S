(function () {

    cleverTapProdTrigger('pageview_Homepage');
    // Once the user lands on the workshop marketing page

    // constants
    var CONFIG = {
        apis: {
            allStatesUnderIndia: BCAP_API_BASE_URL + 'api/geo_dimensions/india_state_list_non_paginated',
            sendOtp: BCAS_API_BASE_URL + 'api/acs/v2/send-otp',
            verifyOtp: BCAS_API_BASE_URL + 'api/acs/v2/verify-otp',
            voiceOtp: BCAS_API_BASE_URL + 'api/acs/voice',
            getUserProfile: BCAS_API_BASE_URL + 'api/acs/get-user-profiles',
            selectCohort: BCAS_API_BASE_URL + 'api/acs/select-cohort',
            topicsAndTimeSlots: BCAS_API_BASE_URL + 'api/acs/cohort',
            register: BCAS_API_BASE_URL + 'api/acs/v2/register',
            storeProfileId: BCAS_API_BASE_URL + 'api/store-profile-id',
            airtelApiConversion: BASE_URL + 'wp-json/spidy/v1/airtel_api_conversion/?wp-json_allow',
            tllmsApi: 'https://api.tllms.com/1/stats/web/web.counter'
        },
        messages: {
            somethingWentWrong: 'Something went wrong. Please try after some time',
        }
    }

    var sigstat=function(p){"use strict";p=p&&Object.prototype.hasOwnProperty.call(p,"default")?p.default:p;var y="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function t(t,n){return t(n={exports:{}},n.exports),n.exports}var i=t(function(t,n){var e;t.exports=(e=function(f){var i;if("undefined"!=typeof window&&window.crypto&&(i=window.crypto),!i&&"undefined"!=typeof window&&window.msCrypto&&(i=window.msCrypto),!i&&void 0!==y&&y.crypto&&(i=y.crypto),!i)try{i=p}catch(t){}var e=Object.create||function(t){var n;return r.prototype=t,n=new r,r.prototype=null,n};function r(){}var t={},n=t.lib={},o=n.Base={extend:function(t){var n=e(this);return t&&n.mixIn(t),n.hasOwnProperty("init")&&this.init!==n.init||(n.init=function(){n.$super.init.apply(this,arguments)}),(n.init.prototype=n).$super=this,n},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var n in t)t.hasOwnProperty(n)&&(this[n]=t[n]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},h=n.WordArray=o.extend({init:function(t,n){t=this.words=t||[],this.sigBytes=null!=n?n:4*t.length},toString:function(t){return(t||a).stringify(this)},concat:function(t){var n=this.words,e=t.words,i=this.sigBytes,r=t.sigBytes;if(this.clamp(),i%4)for(var o=0;o<r;o++){var s=e[o>>>2]>>>24-o%4*8&255;n[i+o>>>2]|=s<<24-(i+o)%4*8}else for(o=0;o<r;o+=4)n[i+o>>>2]=e[o>>>2];return this.sigBytes+=r,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=f.ceil(n/4)},clone:function(){var t=o.clone.call(this);return t.words=this.words.slice(0),t},random:function(t){for(var n=[],e=0;e<t;e+=4)n.push(function(){if(i){if("function"==typeof i.getRandomValues)try{return i.getRandomValues(new Uint32Array(1))[0]}catch(t){}if("function"==typeof i.randomBytes)try{return i.randomBytes(4).readInt32LE()}catch(t){}}throw new Error("Native crypto module could not be used to get secure random number.")}());return new h.init(n,t)}}),s=t.enc={},a=s.Hex={stringify:function(t){for(var n=t.words,e=t.sigBytes,i=[],r=0;r<e;r++){var o=n[r>>>2]>>>24-r%4*8&255;i.push((o>>>4).toString(16)),i.push((15&o).toString(16))}return i.join("")},parse:function(t){for(var n=t.length,e=[],i=0;i<n;i+=2)e[i>>>3]|=parseInt(t.substr(i,2),16)<<24-i%8*4;return new h.init(e,n/2)}},c=s.Latin1={stringify:function(t){for(var n=t.words,e=t.sigBytes,i=[],r=0;r<e;r++){var o=n[r>>>2]>>>24-r%4*8&255;i.push(String.fromCharCode(o))}return i.join("")},parse:function(t){for(var n=t.length,e=[],i=0;i<n;i++)e[i>>>2]|=(255&t.charCodeAt(i))<<24-i%4*8;return new h.init(e,n)}},u=s.Utf8={stringify:function(t){try{return decodeURIComponent(escape(c.stringify(t)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function(t){return c.parse(unescape(encodeURIComponent(t)))}},l=n.BufferedBlockAlgorithm=o.extend({reset:function(){this._data=new h.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=u.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(t){var n,e=this._data,i=e.words,r=e.sigBytes,o=this.blockSize,s=r/(4*o),a=(s=t?f.ceil(s):f.max((0|s)-this._minBufferSize,0))*o,c=f.min(4*a,r);if(a){for(var u=0;u<a;u+=o)this._doProcessBlock(i,u);n=i.splice(0,a),e.sigBytes-=c}return new h.init(n,c)},clone:function(){var t=o.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0}),d=(n.Hasher=l.extend({cfg:o.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){l.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new d.HMAC.init(e,n).finalize(t)}}}),t.algo={});return t}(Math),e)}),a=(t(function(t,n){var c;t.exports=(c=i,function(r){var t=c,n=t.lib,e=n.WordArray,i=n.Hasher,o=t.algo,s=[],_=[];!function(){function t(t){return 4294967296*(t-(0|t))|0}for(var n=2,e=0;e<64;)!function(t){for(var n=r.sqrt(t),e=2;e<=n;e++)if(!(t%e))return;return 1}(n)||(e<8&&(s[e]=t(r.pow(n,.5))),_[e]=t(r.pow(n,1/3)),e++),n++}();var m=[],a=o.SHA256=i.extend({_doReset:function(){this._hash=new e.init(s.slice(0))},_doProcessBlock:function(t,n){for(var e,i,r,o,s=this._hash.words,a=s[0],c=s[1],u=s[2],f=s[3],h=s[4],l=s[5],d=s[6],p=s[7],y=0;y<64;y++){y<16?m[y]=0|t[n+y]:(i=((e=m[y-15])<<25|e>>>7)^(e<<14|e>>>18)^e>>>3,o=((r=m[y-2])<<15|r>>>17)^(r<<13|r>>>19)^r>>>10,m[y]=i+m[y-7]+o+m[y-16]);var g=a&c^a&u^c&u,w=(a<<30|a>>>2)^(a<<19|a>>>13)^(a<<10|a>>>22),v=p+((h<<26|h>>>6)^(h<<21|h>>>11)^(h<<7|h>>>25))+(h&l^~h&d)+_[y]+m[y],p=d,d=l,l=h,h=f+v|0,f=u,u=c,c=a,a=v+(w+g)|0}s[0]=s[0]+a|0,s[1]=s[1]+c|0,s[2]=s[2]+u|0,s[3]=s[3]+f|0,s[4]=s[4]+h|0,s[5]=s[5]+l|0,s[6]=s[6]+d|0,s[7]=s[7]+p|0},_doFinalize:function(){var t=this._data,n=t.words,e=8*this._nDataBytes,i=8*t.sigBytes;return n[i>>>5]|=128<<24-i%32,n[14+(64+i>>>9<<4)]=r.floor(e/4294967296),n[15+(64+i>>>9<<4)]=e,t.sigBytes=4*n.length,this._process(),this._hash},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});t.SHA256=i._createHelper(a),t.HmacSHA256=i._createHmacHelper(a)}(Math),c.SHA256)}),t(function(t,n){var e;t.exports=(e=i,void function(){var t=e.lib.Base,u=e.enc.Utf8;e.algo.HMAC=t.extend({init:function(t,n){t=this._hasher=new t.init,"string"==typeof n&&(n=u.parse(n));var e=t.blockSize,i=4*e;n.sigBytes>i&&(n=t.finalize(n)),n.clamp();for(var r=this._oKey=n.clone(),o=this._iKey=n.clone(),s=r.words,a=o.words,c=0;c<e;c++)s[c]^=1549556828,a[c]^=909522486;r.sigBytes=o.sigBytes=i,this.reset()},reset:function(){var t=this._hasher;t.reset(),t.update(this._iKey)},update:function(t){return this._hasher.update(t),this},finalize:function(t){var n=this._hasher,e=n.finalize(t);return n.reset(),n.finalize(this._oKey.clone().concat(e))}})}())}),t(function(t,n){t.exports=i.HmacSHA256})),c={113:"MGFiZWQ5MmYtNGQ3Mi00ODAxLTgzYmUtODRiZWE5ZWM4YWY1\n",13:"MGFiZWQ5MmYtNGQ3Mi00ODAxLTgzYmUtODRiZWE5ZWM4YWY1\n",109:"MGFiZWQ5MmYtNGQ3Mi00ODAxLTgzYmUtODRiZWE5ZWM4YWY1\n",9:"MGFiZWQ5MmYtNGQ3Mi00ODAxLTgzYmUtODRiZWE5ZWM4YWY1\n"};return function(t,n){var e=c[t];if(!e)return"";var i,r=(i="X-TNL-APPID"+":"+t,i=(i+="_")+"X-TNL-DEVICEOS"+":"+"web",i=(i+="_")+"X-TNL-TIMESTAMP"+":"+n);console.log("m - "+r);var o=atob(e)+"_"+t+"_"+"web"+"_"+n;console.log("k - "+o);var s=a(r,o).toString();return console.log("si - "+s),s}}(crypto);
    
    

    var debounce = function debounce(func, delay) {
        var debounceTimer;
        return function () {
            var context = this;
            var args = arguments;
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(function () {
                return func.apply(context, args);
            }, delay);
        };
    };

    var TRIAL = {
        sortBasedTime: function (arr) {
            return arr.sort(function (a, b) {
                // get time time from string
                // then get am or pm from string and append
                // both can be done using slice method
                return Date.parse('1970/01/01 ' + a.hour + ':' + a.minutes + ' ' + a.meridiem) - Date.parse('1970/01/01 ' + b.hour + ':' + b.minutes + ' ' + b.meridiem)
            });
        },
        findIndexOfElements: function (elements, className) {
            for (var i = 0; i < elements.length; i++) {
                if ($(elements[i]).hasClass(className))
                    return i
            }
        },
       
        signG:  function (eventId,eventName){
            
            var eventData = [{"app_id": 109,
                "app_ver": "4.0.0.0",
                "counter": eventName,
                "date": new Date(),
                "event_id": 1,
                "kingdom": "onboarding",
                "network_info": "wifi",
                "param1": "",
                "phylum": "view",
                "ref_id": 0,
                "session_id": "",
                "u_event_id": eventId,
                "u_ref_id": null,
                "user_id": "",
                "value1": ""}]
                
            const date = Math.floor(Date.now() / 1000);
            const signature = sigstat(109, date);
           
               
              const headersObj = {
                'X-TNL-APPID': 109,
                'X-TNL-DEVICEOS': 'web',
                'X-TNL-TIMESTAMP': date,
                'X-TNL-SIG': signature
              };
              $.ajax({
                type: 'POST',
                url: CONFIG.apis.tllmsApi,
                contentType:  'application/json',
                data: JSON.stringify(eventData),
                headers: headersObj,
               
                success: function (data, status, xhr) {
                    console.log("xhr.status",xhr.status);
                    if (xhr.status=200) { 
                    console.log("sucess");
                    }
                }})
            
            
            //   return {sendOLAPEvents};
            },
        // tracked data to clevertap
        cleverTap: function (name) {
            var obj = {};
            obj.user_id = TRIAL.validatedFormFieldsValues['free-trial-classes']['profileId'];
            obj.variety = TRIAL.validatedFormFieldsValues['free-trial-classes']['profileType'];
            if (TRIAL.validatedFormFieldsValues['free-trial-classes']['state']) {
                obj.selectedState = TRIAL.validatedFormFieldsValues['free-trial-classes']['state'];
            }
            if (TRIAL.validatedFormFieldsValues['free-trial-classes']['grade']) {
                obj.grade_selected = TRIAL.validatedFormFieldsValues['free-trial-classes']['grade'];
            }
            if (TRIAL.validatedFormFieldsValues['free-trial-classes']['cohortId']) {
                obj.cohortId = TRIAL.validatedFormFieldsValues['free-trial-classes']['cohortId'];
            }
            if (TRIAL.validatedFormFieldsValues['free-trial-classes']['courseId']) {
                obj.courseId = TRIAL.validatedFormFieldsValues['free-trial-classes']['courseId'];
            }
            if (TRIAL.validatedFormFieldsValues['free-trial-classes']['topicName']) {
                obj.topicName = TRIAL.validatedFormFieldsValues['free-trial-classes']['topicName'];
            }
            if (TRIAL.validatedFormFieldsValues['free-trial-classes']['topicId']) {
                obj.topicId = TRIAL.validatedFormFieldsValues['free-trial-classes']['topicId'];
            }
            if (TRIAL.validatedFormFieldsValues['free-trial-classes']['slotId']) {
                obj.slotId = TRIAL.validatedFormFieldsValues['free-trial-classes']['slotId'];
            }
            if (TRIAL.validatedFormFieldsValues['free-trial-classes']['startTime']) {
                obj.startTime = TRIAL.validatedFormFieldsValues['free-trial-classes']['startTime'];
            }
            cleverTapProdTrigger(name, obj);
        },
        callAirtelAPI: function (api_url) {
            jQuery.ajax({
                type: 'GET',
                url: api_url,
                contentType: false,
                crossDomain: true,
                cache: false,
                processData: false,
                success: function (data) {
                    if (data) {
                        // console.log("Success");
                    }
                },
                fail: function () {
                    // console.log("Failed");
                }
            });
        },
        /*
          accepts: formName(eg: registration, i.e. name='registration'), actionType(onInput/onDirect)
          Description: will validate n number of forms and fields, if required list it under switch case and values will be stored in formValues
          returns true or value
        */
        validatedFormFieldsValues: {},
        validateFormFields: function (formName, actionType) {
            if (!TRIAL.validatedFormFieldsValues[formName])
                TRIAL.validatedFormFieldsValues[formName] = {};
            var formEle = $('[name=' + formName + ']');
            var allInputs = formEle.find('[name]').not('[data-no-validation]');
            // by using name
            var invalidInputArray = [];
            allInputs.each(function (i, ele) {
                var inputEle = $(ele);
                var inputName = inputEle.attr('name');
                switch (inputName) {
                    case "name":
                        this.isValidInput = UTILITIES.nameValidation;
                        this.requiredName = "Name";
                        break;
                    case "mobile":
                        this.isValidInput = UTILITIES.phoneValidation;
                        this.requiredName = "Mobile No.";
                        break;
                    case "email":
                        this.isValidInput = UTILITIES.emailValidation;
                        break;
                    case "course":
                        this.isValidInput = UTILITIES.requiredValidation;
                        this.requiredName = "Course";
                        break;
                    case "state":
                        this.isValidInput = UTILITIES.requiredValidation;
                        this.requiredName = "State";
                        break;
                    // case "grade":
                    //         this.isValidInput = UTILITIES.requiredValidation;
                    //         this.requiredName = "Grade";
                    //         break;    
                    case "userProfile":
                        this.isValidInput = UTILITIES.requiredValidation;
                        this.requiredName = "Profile selection";
                        break;
                    default:
                        this.isValidInput = null;
                        break;
                }
                actionType === 'onInput' && inputEle.on('input change', function () {
                    if (this.isValidInput) {
                        this.isValid = this.isValidInput(inputEle, null, this.requiredName, inputEle.attr('data-optional') !== undefined, inputEle.attr('data-error-message'));
                    }
                    TRIAL.validatedFormFieldsValues[formName][inputName] = inputEle.val() ? inputEle.val().trim() : '';
                    // getting all value
                });

                if (actionType === 'onDirect' && this.isValidInput) {
                    this.isValid = this.isValidInput(inputEle, null, this.requiredName, inputEle.attr('data-optional') !== undefined, inputEle.attr('data-error-message'));
                    if (!this.isValid) {
                        invalidInputArray.push(this.isValid);
                        // pushing not valid input
                    }
                    TRIAL.validatedFormFieldsValues[formName][inputName] = inputEle.val() ? inputEle.val().trim() : '';
                    // getting all value
                }

            });
            return !invalidInputArray.length ? true : false;
        },

        formStepNumber: 1,
        isPhoneNumberVerified: false,
        referenceIdForMessageOtp: '',
        registration: function (formName) {
         
            TRIAL.signG(2400200,'view book a free class page');
            TRIAL.signG(2400201,'click book a free class page')
            var formEle = $('form[name=' + formName + ']');
            var formSubmitButton = formEle.find('[data-submit-button]');
            var phoneInput = formEle.find('[data-mobile-input]');

            TRIAL.validatedFormFieldsValues[formName]['isProfileOptionEnabled'] = false; // setting by default false
            TRIAL.validatedFormFieldsValues[formName]['isGradeOptionEnabled'] = false; // setting by default false
            TRIAL.validatedFormFieldsValues[formName]['isTopicOptionEnabled'] = false; // setting by default false
            TRIAL.validatedFormFieldsValues[formName]['isSlotOptionEnabled'] = false; // setting by default false
            if (formEle.find('[name="whatsapp"]').length) {
                TRIAL.validatedFormFieldsValues[formName]['whatsapp'] = false; // setting by default
            }

            // setting ad params
            TRIAL.validatedFormFieldsValues[formName]['siteId'] = UTILITIES.getParamValueByName('siteId', C_URL)
            TRIAL.validatedFormFieldsValues[formName]['adId'] = UTILITIES.getParamValueByName('ad_id', C_URL)
            TRIAL.validatedFormFieldsValues[formName]['adsetId'] = UTILITIES.getParamValueByName('adset_id', C_URL)
            TRIAL.validatedFormFieldsValues[formName]['pid'] = UTILITIES.getParamValueByName('pid', C_URL)
            TRIAL.validatedFormFieldsValues[formName]['gclId'] = UTILITIES.getParamValueByName('gclid', C_URL)
            TRIAL.validatedFormFieldsValues[formName]['fbclId'] = UTILITIES.getParamValueByName('fbclid', C_URL)
            TRIAL.validatedFormFieldsValues[formName]['clientId'] = window.location.host
            TRIAL.validatedFormFieldsValues[formName]['utmContent'] = UTILITIES.getParamValueByName('utm_content', C_URL)
            TRIAL.validatedFormFieldsValues[formName]['utmMedium'] = UTILITIES.getParamValueByName('utm_medium', C_URL)
            TRIAL.validatedFormFieldsValues[formName]['utmSource'] = UTILITIES.getParamValueByName('utm_source', C_URL)
            TRIAL.validatedFormFieldsValues[formName]['campaignName'] = UTILITIES.getParamValueByName('utm_campaign', C_URL)
            TRIAL.validatedFormFieldsValues[formName]['campaignId'] = UTILITIES.getParamValueByName('campaign_ID', C_URL)

            //  on name, email, state, (on success of phone validation) selector and get user profile
            var firstStepInputSelectors = formEle.find('[name="name"], [name="mobile"], [name="email"]');
            var debounceApiControl = debounce(function () {
                TRIAL.profileAndGradeApiControl(formName);
            }, formApiDebounceTime); // debounce function declare

            formEle.find('[name="state"]').on('change', function () { // on state change
                if (!this.oneTimeFlag) { // adding flag if user start typing
                    this.oneTimeFlag = 1
                }
                resetAndCallFunction();
            });
            // formEle.find('[data-select-your-class]').removeClass('hidden');
            // formEle.find('[data-grades]').removeClass('hidden');
            firstStepInputSelectors.on('input', function () { // on input of name, mobile, email
                if (!this.oneTimeFlag) { // adding flag if user start typing
                    this.oneTimeFlag = 1
                }
                resetAndCallFunction();
            })

            function resetAndCallFunction() {
                debounceApiControl();
                formEle.find('[data-choose-your-profile], [data-select-your-class]').addClass('hidden'); // to hide
                // resetting values
                TRIAL.validatedFormFieldsValues[formName]['cohortId'] = '';
                TRIAL.validatedFormFieldsValues[formName]['grade'] = '';
                TRIAL.validatedFormFieldsValues[formName]['profileId'] = '';

                // remove error message on profile validation message
                var profileSelector = formEle.find('[data-choose-your-profile]');
                profileSelector.find('[data-profiles]').removeClass('input-error');
                profileSelector.find('[data-profiles]').siblings('.input-error-msg').remove();
            }
            var courseType = [];
            formEle.on('submit', function (e) {
               TRIAL.signG(2400206,'Click schedule/book a free class/try now');
                e.preventDefault();
                var formFieldData = TRIAL.validatedFormFieldsValues[formName];
                if (formFieldData .isGradeOptionEnabled===false) {
                    formEle.find('[data-grades]').removeClass('input-error').addClass('input-error');
                    formEle.find('[data-grades]').siblings('.input-error-msg').remove();
                    formEle.find('[data-grades]').after('<div class="input-error-msg">Please select your class.</div>');
                }
                if (TRIAL.validateFormFields(formName, 'onDirect')) {
                    if (formEle.find('[name="whatsapp"]').length) {
                        TRIAL.validatedFormFieldsValues[formName]['whatsapp'] = formEle.find('[name="whatsapp"]').is(':checked'); // setting whatsapp value
                    }
                    // var formFieldData = TRIAL.validatedFormFieldsValues[formName];
                    if (TRIAL.isPhoneNumberVerified) {

                        // for 1,2,3 grades we are calling directly registration api
                        // if (TRIAL.validatedFormFieldsValues[formName]['grade'] == 1 || TRIAL.validatedFormFieldsValues[formName]['grade'] == 2 || TRIAL.validatedFormFieldsValues[formName]['grade'] == 3 ) {
                        //     TRIAL.formStepNumber = 2;
                        //     TRIAL.showRegistrationSuccessMessage = true;
                        // }
                        if (TRIAL.validatedFormFieldsValues[formName]['grade'] == 1 || TRIAL.validatedFormFieldsValues[formName]['grade'] == 2 || TRIAL.validatedFormFieldsValues[formName]['grade'] == 3 || TRIAL.validatedFormFieldsValues[formName]['grade'] == 'IAS' || TRIAL.validatedFormFieldsValues[formName]['grade'] == 'CAT' || TRIAL.validatedFormFieldsValues[formName]['grade'] == 'GATE' ) 
                        {if(TRIAL.validatedFormFieldsValues[formName]['grade'] == 'IAS'){courseType = 'IAS';
                        }else if(TRIAL.validatedFormFieldsValues[formName]['grade'] == 'CAT'){
                            courseType = 'CAT';
                        }else if(TRIAL.validatedFormFieldsValues[formName]['grade'] == 'GATE'){
                            courseType = 'GATE';
                        }
                        TRIAL.formStepNumber = 2;
                        TRIAL.showRegistrationSuccessMessage = true;
                        }

                        if (TRIAL.formStepNumber === 1) {
                            // error message for profile
                            if (TRIAL.validatedFormFieldsValues[formName]['isProfileOptionEnabled'] && !TRIAL.validatedFormFieldsValues[formName]['profileId']) {
                                formEle.find('[data-profiles]').removeClass('input-error').addClass('input-error');
                                formEle.find('[data-profiles]').siblings('.input-error-msg').remove();
                                formEle.find('[data-profiles]').after('<div class="input-error-msg">Please choose your profile.</div>');
                                return;
                            }
                            // error message for class

                            if (!TRIAL.validatedFormFieldsValues[formName]['cohortId'] || !TRIAL.validatedFormFieldsValues[formName]['grade']) {
                                formEle.find('[data-grades]').removeClass('input-error').addClass('input-error');
                                formEle.find('[data-grades]').siblings('.input-error-msg').remove();
                                formEle.find('[data-grades]').after('<div class="input-error-msg">Please select your class.</div>');
                                return;
                            }
                            formSubmitButton.attr('disabled', true)
                            formSubmitButton.html('Loading..');

                            // ajax call
                            // build params
                            var buildingParams = {
                                "userAttributes": {
                                    "verifiedMobile": "+91-" + formFieldData.mobile,
                                    "grade": formFieldData.grade,
                                    "name": formFieldData.name,
                                    "userLocationAttributes": {
                                        "adminArea": formFieldData.state
                                    },
                                    "cohortId": formFieldData['cohortId'],
                                    "grade": formFieldData['grade'],
                                    "profileId": formFieldData['profileId'],
                                }
                            };
                            if (TRIAL.validatedFormFieldsValues[formName]['whatsapp'] !== undefined) {
                                buildingParams.userAttributes = TRIAL.validatedFormFieldsValues[formName]['whatsapp']
                            }
                            if (formFieldData.email) {
                                buildingParams.userAttributes.unverifiedEmail = formFieldData.email
                            }
                            var params = JSON.stringify(buildingParams);
                            UTILITIES.removeToastMessage(7); // removed toast message to reset
                            $.ajax({
                                type: 'POST',
                                url: CONFIG.apis.selectCohort,
                                contentType: "application/json",
                                dataType: "json",
                                data: params,
                                beforeSend: function (xhr) {
                                    xhr.setRequestHeader('Authorization', "Bearer " + TRIAL.referenceIdForMessageOtp);
                                },
                                success: function (data, status, xhr) {
                                    if (data.signedLoginToken) {
                                        TRIAL.signedLoginToken = data.signedLoginToken;
                                        if(TRIAL.validatedFormFieldsValues[formName]['grade'] == 11 || TRIAL.validatedFormFieldsValues[formName]['grade'] == 12 || TRIAL.validatedFormFieldsValues[formName]['grade'] == '11-12'){
                                            registerformdata(formFieldData,formSubmitButton,TRIAL.signedLoginToken)    
                                        
                                        }else{
                                        topicsAndTimeSlots(); // getting topic slots should be sequence because of signed token should be happen in TLLMS
                                        function topicsAndTimeSlots() {
                                            UTILITIES.removeToastMessage(8); // removed toast message to reset
                                            $.ajax({
                                                type: 'GET',
                                                url: CONFIG.apis.topicsAndTimeSlots + '?cohortId=' + TRIAL.validatedFormFieldsValues['free-trial-classes']['cohortId'],
                                                success: function (data, status, xhr) {
                                                    if (data.topics && data.topics.length) {
                                                        formFieldData.courseId = data.topics[0].courseId;
                                                        formFieldData.courseType = data.topics[0].courseType;
                                                        formFieldData.startTime = data.topics[0].slots[0].start_time
                                                        formFieldData.endTime = data.topics[0].slots[0].end_time
                                                        formFieldData.slotId = data.topics[0].slots[0].slot_id
                                                        formFieldData.topicId = data.topics[0].id
                                                        // formFieldData.topicName = data.topics[0].name
                                                        registerformdata(formFieldData,formSubmitButton,TRIAL.signedLoginToken)
                                                        return;
                                                        TRIAL.formStepNumber++;
                                                        jQuery("html, body").animate({
                                                            scrollTop: 0
                                                        }, 400); // for scroll
                                                        var dataTopics = data.topics;
                                                        // combine duplicate topics with different slots
                                                        var newDataTopics = [], ids = [];
                                                        for(var i = 0; i < dataTopics.length; i++){
                                                            var currentId = dataTopics[i]['id'];
                                                            var pos = ids.indexOf(currentId)
                                                            if(pos === -1 ){ // not exist
                                                                ids.push(currentId)
                                                                newDataTopics.push(dataTopics[i])
                                                            } else {
                                                                var newArray = newDataTopics[pos]['slots'].concat(dataTopics[i]['slots'])
                                                                newDataTopics[pos]['slots'] = newArray;
                                                            }
                                                        }
                                                        TRIAL.showAndBuildTopicsAndSlots(formEle, newDataTopics);
                                                        courseType.push(newDataTopics);
                                                        courseType = courseType[0][0]['courseType'];
                                                        $('[data-trial-form-indicators]>li[data-ind-1]').addClass('active');
                                                        formEle.find('[data-free-trial-classes-step-0]').addClass('hidden');
                                                        formEle.find('[data-free-trial-classes-step-1]').removeClass('hidden');
                                                        formSubmitButton.html('Confirm');
                                                    } else {
                                                        UTILITIES.addToastMessage(8, 'No classes scheduled');
                                                        formSubmitButton.html(formSubmitButton.attr('data-text'));
                                                    }
                                                    formSubmitButton.attr('disabled', false)
                                                },
                                                error: function (err) {
                                                    formSubmitButton.attr('disabled', false)
                                                    formSubmitButton.html(formSubmitButton.attr('data-text'));
                                                    UTILITIES.addToastMessage(8, err.responseJSON && err.responseJSON.message ? err.responseJSON.message : CONFIG.messages.somethingWentWrong);
                                                }
                                            });
                                        }
                                    }
                                    } else {
                                        UTILITIES.addToastMessage(7, CONFIG.messages.somethingWentWrong);
                                    }
                                },
                                error: function (err) {
                                    formSubmitButton.attr('disabled', false)
                                    formSubmitButton.html(formSubmitButton.attr('data-text'));
                                    UTILITIES.addToastMessage(7, err.responseJSON && err.responseJSON.message ? err.responseJSON.message : CONFIG.messages.somethingWentWrong);
                                }
                            });

                            function topicsAndTimeSlots() {
                                UTILITIES.removeToastMessage(8); // removed toast message to reset
                                $.ajax({
                                    type: 'GET',
                                    url: CONFIG.apis.topicsAndTimeSlots + '?cohortId=' + TRIAL.validatedFormFieldsValues['free-trial-classes']['cohortId'],
                                    success: function (data, status, xhr) {
                                        if (data.topics && data.topics.length) {
                                            TRIAL.formStepNumber++;
                                            jQuery("html, body").animate({
                                                scrollTop: 0
                                            }, 400); // for scroll
                                            var dataTopics = data.topics;
                                            // combine duplicate topics with different slots
                                            var newDataTopics = [], ids = [];
                                            for(var i = 0; i < dataTopics.length; i++){
                                                var currentId = dataTopics[i]['id'];
                                                var pos = ids.indexOf(currentId)
                                                if(pos === -1 ){ // not exist
                                                    ids.push(currentId)
                                                    newDataTopics.push(dataTopics[i])
                                                } else {
                                                    var newArray = newDataTopics[pos]['slots'].concat(dataTopics[i]['slots'])
                                                    newDataTopics[pos]['slots'] = newArray;
                                                }
                                            }
                                            TRIAL.showAndBuildTopicsAndSlots(formEle, newDataTopics);
                                            courseType.push(newDataTopics);
                                            courseType = courseType[0][0]['courseType'];
                                            $('[data-trial-form-indicators]>li[data-ind-1]').addClass('active');
                                            formEle.find('[data-free-trial-classes-step-0]').addClass('hidden');
                                            formEle.find('[data-free-trial-classes-step-1]').removeClass('hidden');
                                            formSubmitButton.html('Confirm');
                                        } else {
                                            UTILITIES.addToastMessage(8, 'No classes scheduled');
                                            formSubmitButton.html(formSubmitButton.attr('data-text'));
                                        }
                                        formSubmitButton.attr('disabled', false)
                                    },
                                    error: function (err) {
                                        formSubmitButton.attr('disabled', false)
                                        formSubmitButton.html(formSubmitButton.attr('data-text'));
                                        UTILITIES.addToastMessage(8, err.responseJSON && err.responseJSON.message ? err.responseJSON.message : CONFIG.messages.somethingWentWrong);
                                    }
                                });
                            }
                           

                            if (formEle.find('[name="whatsapp"]').length && formEle.find('[name="whatsapp"]').is(':checked')) {
                                TRIAL.cleverTap('receive_update_via_whatsapp');
                            }

                            TRIAL.cleverTap('registration_form_submit_step1'); // once the user does step 1 of the form in the lead form
                            typeof gtag !== 'undefined' && typeof step1Script !== 'undefined' && step1Script();
                            typeof fbq !== 'undefined' && typeof step1fbScript !== 'undefined' && step1fbScript();
                        } else if (TRIAL.formStepNumber === 2) {
                            jQuery("html, body").animate({
                                scrollTop: 0
                            }, 400); // for scroll

                            // if (TRIAL.validatedFormFieldsValues[formName]['isTopicOptionEnabled'] && !TRIAL.validatedFormFieldsValues[formName]['topicId'] && !TRIAL.validatedFormFieldsValues[formName]['topicName'] && !TRIAL.validatedFormFieldsValues[formName]['courseId']) {
                            //     formEle.find('[data-topics]').removeClass('input-error').addClass('input-error');
                            //     formEle.find('[data-topics]').siblings('.input-error-msg').remove();
                            //     formEle.find('[data-topics]').after('<div class="input-error-msg">Please select topic.</div>');
                            //     return;
                            // }
                            // if (TRIAL.validatedFormFieldsValues[formName]['isSlotOptionEnabled'] && !TRIAL.validatedFormFieldsValues[formName]['slotId'] && !TRIAL.validatedFormFieldsValues[formName]['startTime'] && !TRIAL.validatedFormFieldsValues[formName]['endTime']) {
                            //     formEle.find('[data-time-slots]').removeClass('input-error').addClass('input-error');
                            //     formEle.find('[data-time-slots]').siblings('.input-error-msg').remove();
                            //     formEle.find('[data-time-slots]').after('<div class="input-error-msg">Please select slot.</div>');
                            //     return;
                            // }
                            formSubmitButton.attr('disabled', true);
                            formSubmitButton.html('Loading..');
                            
                            // ajax call
                            // build params
                            var buildingParams = {
                                "userAttributes": {
                                    "verifiedMobile": "+91-" + formFieldData.mobile,
                                    "grade": formFieldData.grade,
                                    "name": formFieldData.name,
                                    "topicName": formFieldData.topicName,
                                    "profileId": formFieldData.profileId,
                                    "profileType": formFieldData.profileType,
                                    "userLocationAttributes": {
                                        "adminArea": formFieldData.state
                                    },
                                    "bcasAttributes": {
                                        "cohortId": formFieldData.cohortId,
                                        "courseId": formFieldData.courseId,
                                        "startTime": formFieldData.startTime,
                                        "endTime": formFieldData.endTime,
                                        "slotId": formFieldData.slotId,
                                        "topicId": formFieldData.topicId,
                                        "courseType": courseType
                                    },
                                    "userAdTrackingAttributes":{
                                        "siteId": formFieldData.siteId,
                                        "adId": formFieldData.adId,
                                        "adsetId": formFieldData.adsetId,
                                        "pid": formFieldData.pid,
                                        "gclId": formFieldData.gclId,
                                        "fbclId": formFieldData.fbclId,
                                        "clientId": formFieldData.clientId,
                                        "utmContent": formFieldData.utmContent,
                                        "utmMedium": formFieldData.utmMedium,
                                        "utmSource": formFieldData.utmSource,
                                        "campaignName": formFieldData.campaignName,
                                        "campaignId": formFieldData.campaignId
                                    },
                                    "url": typeof (UTILITIES.fixUrl) !== 'undefined' ? UTILITIES.fixUrl(C_URL) : C_URL,
                                    "referrerUrl": document.referrer
                                }
                            };
                            if(buildingParams.userAttributes.grade == "1" || buildingParams.userAttributes.grade == "2" || buildingParams.userAttributes.grade == "3" ){
                            delete buildingParams.userAttributes.bcasAttributes.courseType;
                            }
                            console.log(buildingParams);
                            if (formFieldData.email) {
                                buildingParams.userAttributes.unverifiedEmail = formFieldData.email
                            }
                            if (TRIAL.validatedFormFieldsValues[formName]['whatsapp'] !== undefined) {
                                buildingParams.userAttributes.whatsapp = TRIAL.validatedFormFieldsValues[formName]['whatsapp']
                            }
                            var params = JSON.stringify(buildingParams);

                            UTILITIES.removeToastMessage(6); // removed toast message to reset
                            $.ajax({
                                type: 'POST',
                                url: CONFIG.apis.register,
                                contentType: "application/json",
                                dataType: "json",
                                data: params,
                                //                                 crossDomain: true,
                                //                                 processData: false,
                                beforeSend: function (xhr) {
                                    xhr.setRequestHeader('Authorization', "Bearer " + TRIAL.referenceIdForMessageOtp);
                                    xhr.setRequestHeader('signedlogintoken', TRIAL.signedLoginToken);
                                },
                                success: function (data, status, xhr) {
                                    formSubmitButton.attr('disabled', false)
                                    formSubmitButton.html('Loading..');

                                    TRIAL.cleverTap('registration_form_submit_home'); // once the user clicks on book now button after entering the form data and data is submitted successfully

                                    var utmCamp = UTILITIES.getParameterByName('utm_campaign', C_URL);

                                    if (TRIAL.showRegistrationSuccessMessage) { // on grade 1,2,3 show message
                                        formEle.addClass('hidden');
                                        $('[data-trial-form-indicators]').addClass('hidden');
                                        formEle.siblings('[data-success-message]').removeClass('hidden');
                                        $('form[name=registration]').siblings('[data-terms-conditions]').addClass('hidden');
                                        $('[data-register-header]').addClass('hidden');
                                        if(TRIAL.validatedFormFieldsValues[formName]['grade'] == 'IAS' || TRIAL.validatedFormFieldsValues[formName]['grade'] == 'CAT' || TRIAL.validatedFormFieldsValues[formName]['grade'] == 'GATE'){
                                            $('.trial-form-title').addClass('hidden');
                                            $('.trial-form-title-sub-desc').addClass('hidden');
                                        }
                                        //This api will call only if utm_campaign is airtel
                                        if (utmCamp && utmCamp == "airtel") {
                                            TRIAL.callAirtelAPI(CONFIG.apis.airtelApiConversion);
                                        }

                                        typeof gtag !== 'undefined' && typeof step1Script !== 'undefined' && step1Script();
                                        typeof fbq !== 'undefined' && typeof step1fbScript !== 'undefined' && step1fbScript();

                                        return;
                                    }
                                    var redirectUrl = xhr.getResponseHeader("Redirect-Url") || xhr.getResponseHeader("redirect-url");
                                    if (redirectUrl) {
                                        //This api will call only if utm_campaign is airtel
                                        if (utmCamp && utmCamp == "airtel") {
                                            TRIAL.callAirtelAPI(CONFIG.apis.airtelApiConversion);
                                        }

                                        typeof gtag !== 'undefined' && typeof step2Script !== 'undefined' && step2Script();
                                        typeof fbq !== 'undefined' && typeof step2fbScript !== 'undefined' && step2fbScript();

                                        setTimeout(function () {
                                            window.location.href = redirectUrl
                                        }, 1000);
                                    } else {
                                        UTILITIES.addToastMessage(6, CONFIG.messages.somethingWentWrong);
                                    }
                                },
                                error: function (err) {
                                    formSubmitButton.attr('disabled', false)
                                    formSubmitButton.html(formSubmitButton.attr('data-text'));
                                    UTILITIES.addToastMessage(6, err.responseJSON && err.responseJSON.message ? err.responseJSON.message : CONFIG.messages.somethingWentWrong);

                                    TRIAL.cleverTap('registration_form_submit_error'); // This will trigger when a registration api fails
                                }
                            });
                        } else {}
                    } else {
                        phoneInput.removeClass('input-error').addClass('input-error');
                        phoneInput.siblings('.input-error-msg').remove();
                        phoneInput.after('<div class="input-error-msg">Validate your mobile number</div>');

                        // otp validation message
                        var otpInputVoiceCallBlock = $('[data-otp-input-field-voice-call-option]');
                        if (otpInputVoiceCallBlock.is(':visible') && !otpInputVoiceCallBlock.find('input').val() && !otpInputVoiceCallBlock.find('input').siblings('.input-error-msg').length) {
                            otpInputVoiceCallBlock.find('input').after('<div class="input-error-msg">Enter 4 digit OTP</div>');
                        }
                    }
                } else { // otp validation message
                    var otpInputVoiceCallBlock = $('[data-otp-input-field-voice-call-option]');
                    if (otpInputVoiceCallBlock.is(':visible') && !otpInputVoiceCallBlock.find('input').val() && !otpInputVoiceCallBlock.find('input').siblings('.input-error-msg').length) {
                        otpInputVoiceCallBlock.find('input').after('<div class="input-error-msg">Enter 4 digit OTP</div>');
                    }
                }
            });
            function registerformdata(formFieldData,formSubmitButton,signedLoginToken){
                var buildingParams = {
                    "userAttributes": {
                        "verifiedMobile": "+91-" + formFieldData.mobile,
                        "grade": formFieldData.grade,
                        "name": formFieldData.name,
                        "topicName": formFieldData.topicName,
                        "profileId": formFieldData.profileId,
                        "profileType": formFieldData.profileType,
                        "userLocationAttributes": {
                            "adminArea": formFieldData.state
                        },
                        "bcasAttributes": {
                            "cohortId": formFieldData.cohortId,
                            "courseId": formFieldData.courseId,
                            "startTime": formFieldData.startTime,
                            "endTime": formFieldData.endTime,
                            "slotId": formFieldData.slotId,
                            "topicId": formFieldData.topicId,
                            "courseType": formFieldData.courseType
                        },
                        "userAdTrackingAttributes":{
                            "siteId": formFieldData.siteId,
                            "adId": formFieldData.adId,
                            "adsetId": formFieldData.adsetId,
                            "pid": formFieldData.pid,
                            "gclId": formFieldData.gclId,
                            "fbclId": formFieldData.fbclId,
                            "clientId": formFieldData.clientId,
                            "utmContent": formFieldData.utmContent,
                            "utmMedium": formFieldData.utmMedium,
                            "utmSource": formFieldData.utmSource,
                            "campaignName": formFieldData.campaignName,
                            "campaignId": formFieldData.campaignId
                        },
                        "url": typeof (UTILITIES.fixUrl) !== 'undefined' ? UTILITIES.fixUrl(C_URL) : C_URL,
                        "referrerUrl": document.referrer
                    }
                };
                if (formFieldData.email) {
                    buildingParams.userAttributes.unverifiedEmail = formFieldData.email
                }
                if (TRIAL.validatedFormFieldsValues[formName]['whatsapp'] !== undefined) {
                    buildingParams.userAttributes.whatsapp = TRIAL.validatedFormFieldsValues[formName]['whatsapp']
                }
                var params = JSON.stringify(buildingParams);

                UTILITIES.removeToastMessage(6); // removed toast message to reset
                $.ajax({
                    type: 'POST',
                    url: CONFIG.apis.register,
                    contentType: "application/json",
                    dataType: "json",
                    data: params,
                    //                                 crossDomain: true,
                    //                                 processData: false,
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('Authorization', "Bearer " + TRIAL.referenceIdForMessageOtp);
                        xhr.setRequestHeader('signedlogintoken', signedLoginToken);
                    },
                    success: function (data, status, xhr) {
                        formSubmitButton.attr('disabled', false)
                        formSubmitButton.html('Loading..');

                        TRIAL.cleverTap('registration_form_submit_home'); // once the user clicks on book now button after entering the form data and data is submitted successfully

                        var utmCamp = UTILITIES.getParameterByName('utm_campaign', C_URL);

                        if (TRIAL.showRegistrationSuccessMessage) { // on grade 1,2,3 show message
                            formEle.addClass('hidden');
                            $('[data-trial-form-indicators]').addClass('hidden');
                            formEle.siblings('[data-success-message]').removeClass('hidden');
                            $('form[name=registration]').siblings('[data-terms-conditions]').addClass('hidden');
                            $('[data-register-header]').addClass('hidden');
                            //This api will call only if utm_campaign is airtel
                            if (utmCamp && utmCamp == "airtel") {
                                TRIAL.callAirtelAPI(CONFIG.apis.airtelApiConversion);
                            }

                            typeof gtag !== 'undefined' && typeof step1Script !== 'undefined' && step1Script();
                            typeof fbq !== 'undefined' && typeof step1fbScript !== 'undefined' && step1fbScript();

                            return;
                        }
                        var redirectUrl = xhr.getResponseHeader("Redirect-Url") || xhr.getResponseHeader("redirect-url");
                        if (redirectUrl) {
                            //This api will call only if utm_campaign is airtel
                            if (utmCamp && utmCamp == "airtel") {
                                TRIAL.callAirtelAPI(CONFIG.apis.airtelApiConversion);
                            }

                            typeof gtag !== 'undefined' && typeof step2Script !== 'undefined' && step2Script();
                            typeof fbq !== 'undefined' && typeof step2fbScript !== 'undefined' && step2fbScript();

                            setTimeout(function () {
                                window.location.href = redirectUrl
                            }, 1000);
                        } else {
                            UTILITIES.addToastMessage(6, CONFIG.messages.somethingWentWrong);
                        }
                    },
                    error: function (err) {
                        formSubmitButton.attr('disabled', false)
                        formSubmitButton.html(formSubmitButton.attr('data-text'));
                        UTILITIES.addToastMessage(6, err.responseJSON && err.responseJSON.message ? err.responseJSON.message : CONFIG.messages.somethingWentWrong);

                        TRIAL.cleverTap('registration_form_submit_error'); // This will trigger when a registration api fails
                    }
                });
            } //register function end
            // message otp part
            var otpTimeInterval;
            var sendOtpButton = formEle.find('[data-send-otp-button]');
            var OtpVerifiedIcon = formEle.find('[data-otp-validated-img]');
            var otpInputVoiceCallBlock = formEle.find('[data-otp-input-field-voice-call-option]');
            var otpInput = otpInputVoiceCallBlock.find('input');
            var phoneNumberFromOtpApiResponse;
            var isSendFlag = true;
            sendOtpButton.on('click', function () {
                if (!UTILITIES.phoneValidation(phoneInput, null, 'Mobile No.'))
                    return;
                // if not valid it will exit here

                // timer for send otp
                var otpSecondCounter = 30;
                sendOtpButton.attr('disabled', true);
                sendOtpButton.html('<div class="otp-active-timer" data-otp-active-timer>Resend in <span>' + otpSecondCounter + '</span>sec.</div>');
                // timer
                otpTimeInterval = setInterval(function () {
                    --otpSecondCounter;
                    if (otpSecondCounter <= 0) {
                        clearInterval(otpTimeInterval);
                        sendOtpButton.attr('disabled', false);
                        sendOtpButton.html('Resend OTP');
                    }
                    sendOtpButton.find('[data-otp-active-timer] span').html(otpSecondCounter);
                }, 1000);

                // for otp field
                otpInputVoiceCallBlock.removeClass('hidden');
                otpInput.attr('disabled', false).focus();

                // ajax call for generating otp
                var params = JSON.stringify({
                    phoneNumber: TRIAL.validatedFormFieldsValues[formName].mobile,
                    page: formName
                });
                UTILITIES.removeToastMessage(1);
                // removed toast message to reset
                
               

               TRIAL.signG(2400202,'Click send OTP');
               

               
               
                $.ajax({
                    type: 'POST',
                    url: CONFIG.apis.sendOtp,
                    contentType: "application/json",
                    dataType: "json",
                    data: params,
                    success: function (data, status, xhr) {
                        TRIAL.referenceIdForMessageOtp = xhr.getResponseHeader("Reference-Id") || xhr.getResponseHeader("reference-id")
                        phoneInput.siblings('.input-error-msg').remove();
                        // removing error message to reset.
                        phoneNumberFromOtpApiResponse = data.number;
                        phoneInput.after('<div class="input-error-msg" style="color:green;">We have sent the OTP to <b>' + data.number + '</b></div>');

                        cleverTapProdTrigger('send_otp_success');
                        // This is triggered when an OTP is submitted
                    },
                    error: function (err) {
                        if (err.statusCode().status === 429 && err.responseJSON.isOtpExhausted) {
                            phoneInput.siblings('.input-error-msg').remove();
                            // removing error message to reset.
                            phoneInput.after('<div class="input-error-msg">' + err.responseJSON.message + '</div>');
                        } else {
                            UTILITIES.addToastMessage(1, err.responseJSON && err.responseJSON.message ? err.responseJSON.message : CONFIG.messages.somethingWentWrong);
                        }

                        cleverTapProdTrigger('send_otp_error');
                        // This will trigger when a user clicks on resend otp on the registration page on byjus.com. As many times he clicks - that many times we will trigger the event
                    },
                });

                if (isSendFlag) {
                    cleverTapProdTrigger('click_on_otp');
                    // This will trigger when a user clicks on send otp on the registration page
                } else {
                    cleverTapProdTrigger('Resend_OTP');
                    // This will trigger when a user clicks on resend otp on the registration page on byjus.com. As many times he clicks - that many times we will trigger the event
                }

                isSendFlag = false;
                // once user clicked on button then it will changed to resend button

            });

            // voice over OTP
            var otpVoiceTimeInterval;
            var otpVoiceCallButton = otpInputVoiceCallBlock.find('button');
            otpVoiceCallButton.on('click', function () {
               

                TRIAL.signG(2400203,'Click OTP voice call');

                var otpVoiceSecondCounter = 30;
                otpVoiceCallButton.find('span').html(' <b>' + otpVoiceSecondCounter + '</b>sec.');
                otpVoiceCallButton.attr('disabled', true);
                otpInput.attr('disabled', false).focus();
                otpVoiceTimeInterval = setInterval(function () {
                    --otpVoiceSecondCounter;
                    if (otpVoiceSecondCounter <= 0) {
                        clearInterval(otpVoiceTimeInterval);
                        otpVoiceCallButton.find('span').html('Voice Call');
                        otpVoiceCallButton.attr('disabled', false);
                    } else {
                        otpVoiceCallButton.find('span').html(' <b>' + otpVoiceSecondCounter + '</b>sec.');
                    }
                }, 1000);

                // ajax call for generating otp
                var params = $.param({
                    phoneNumber: TRIAL.validatedFormFieldsValues[formName].mobile,
                    page: formName
                });
                UTILITIES.removeToastMessage(3);
                // removed toast message to reset
                UTILITIES.removeToastMessage(4);
                // removed toast message to reset
                $.get(CONFIG.apis.voiceOtp + '?' + params, function (data, status, xhr) {
                    if (xhr.status === 200 && data) {
                        phoneInput.siblings('.input-error-msg').remove();
                        // removing error message to reset.
                        UTILITIES.addToastMessage(4, 'Calling in 30 seconds');
                        setTimeout(function () {
                            UTILITIES.removeToastMessage(4);
                        }, 5000);
                    } else {
                        if (err.statusCode().status === 429 && err.responseJSON.isOtpExhausted) {
                            UTILITIES.addToastMessage(4, data.message);
                        } else {
                            UTILITIES.addToastMessage(3, err.responseJSON && err.responseJSON.message ? err.responseJSON.message : CONFIG.messages.somethingWentWrong);
                        }

                        cleverTapProdTrigger('submit_voice_call_error');
                        // if the phone number is not valid or something goes wrong while placing the call
                    }
                });

                cleverTapProdTrigger('click_on_voice_call');
                // This will trigger when a user clicks on voice call button on the byjus classes registration page
            });

            //  on change of otp input field
            otpInput.on('input', function () {
                if (UTILITIES.otpValidation($(this))) {
                    var params = JSON.stringify({
                        otp: $(this).val(),
                        phoneNumber: phoneNumberFromOtpApiResponse,
                        page: formName
                    });
                    UTILITIES.removeToastMessage(2);
                    // removed toast message to reset
                    $.ajax({
                        type: 'POST',
                        url: CONFIG.apis.verifyOtp,
                        contentType: "application/json",
                        dataType: "json",
                        data: params,
                        beforeSend: function (xhr) {
                            xhr.setRequestHeader('Authorization', "Bearer " + TRIAL.referenceIdForMessageOtp);
                        },
                        success: function (data, status, xhr) {
                            TRIAL.referenceIdForMessageOtp = xhr.getResponseHeader("Reference-Id") || xhr.getResponseHeader("reference-id")
                            sendOtpButton.attr('disabled', false).addClass('hidden');
                            OtpVerifiedIcon.removeClass('hidden');
                            phoneInput.attr('disabled', true);
                            phoneInput.addClass('phone-valid');
                            phoneInput.siblings('.input-error-msg').remove();
                            otpInputVoiceCallBlock.addClass('hidden');
                            TRIAL.isPhoneNumberVerified = true;

                            TRIAL.profileAndGradeApiControl(formName); // calling profile api on success validation of phone number

                            UTILITIES.removeToastMessage(1);
                            // removed toast message to reset
                            UTILITIES.removeToastMessage(2);
                            // removed toast message to reset
                            UTILITIES.removeToastMessage(3);
                            // removed toast message to reset
                            UTILITIES.removeToastMessage(4);
                            // removed toast message to reset

                            cleverTapProdTrigger('otp_submit_success');
                            // if the entered otp is valid and user is able to proceed
                        },
                        error: function (err) {
                            if (err.statusCode().status === 400) {
                                otpInput.removeClass('input-error');
                                otpInput.siblings('.input-error-msg').remove();
                                otpInput.addClass('input-error');
                                otpInput.after('<div class="input-error-msg">' + err.responseJSON.message + '</div>');
                            } else if (err.statusCode().status === 401) {
                                UTILITIES.addToastMessage(2, err.responseJSON.message);
                            } else {
                                UTILITIES.addToastMessage(2, CONFIG.messages.somethingWentWrong);
                            }

                            cleverTapProdTrigger('otp_submit_error');
                            // if the entered otp is not valid or something goes wrong while validation
                        }
                    });

                    cleverTapProdTrigger('otp_Submit');
                    // This is triggered when an OTP is submitted
                }
            });
        },

        profileAndGradeApiControl: function (formName) {
            var formEle = $('form[name=' + formName + ']');
            if (!(formEle.find('[name="mobile"]')[0].oneTimeFlag && formEle.find('[name="name"]')[0].oneTimeFlag && formEle.find('[name="state"]')[0].oneTimeFlag)) { // checking is user typed
                return;
            }

            var phoneInput = formEle.find('[data-mobile-input]');
            var formSubmitButton = formEle.find('[data-submit-button]');
            var formFieldData = TRIAL.validatedFormFieldsValues[formName];

            if (TRIAL.validateFormFields(formName, 'onDirect')) {
                if (TRIAL.isPhoneNumberVerified) {
                    // ajax call
                    // build params
                    var buildingParams = {
                        "userAttributes": {
                            "verifiedMobile": "+91-" + formFieldData.mobile,
                            "name": formFieldData.name,
                            "userLocationAttributes": {
                                "adminArea": formFieldData.state
                            },
                            "userAdTrackingAttributes":{
                                "siteId": formFieldData.siteId,
                                "adId": formFieldData.adId,
                                "adsetId": formFieldData.adsetId,
                                "pid": formFieldData.pid,
                                "gclId": formFieldData.gclId,
                                "fbclId": formFieldData.fbclId,
                                "clientId": formFieldData.clientId,
                                "utmContent": formFieldData.utmContent,
                                "utmMedium": formFieldData.utmMedium,
                                "utmSource": formFieldData.utmSource,
                                "campaignName": formFieldData.campaignName,
                                "campaignId": formFieldData.campaignId
                            }
                        }
                    };
                    if (TRIAL.validatedFormFieldsValues[formName]['whatsapp'] !== undefined) {
                        buildingParams.userAttributes.whatsapp = TRIAL.validatedFormFieldsValues[formName]['whatsapp']
                    }
                    if (formFieldData.email) {
                        buildingParams.userAttributes.unverifiedEmail = formFieldData.email;
                    }
                    var params = JSON.stringify(buildingParams);

                    UTILITIES.removeToastMessage(5);
                    // removed toast message to reset
                    $.ajax({
                        type: 'POST',
                        url: CONFIG.apis.getUserProfile,
                        contentType: "application/json",
                        dataType: "json",
                        data: params,
                        beforeSend: function (xhr) {
                            xhr.setRequestHeader('Authorization', "Bearer " + TRIAL.referenceIdForMessageOtp);
                        },
                        success: function (data, status, xhr) {
                            var referenceId = xhr.getResponseHeader("Reference-Id") || xhr.getResponseHeader("Reference-Id");
                            if (!data.data) {
                                UTILITIES.addToastMessage(5, CONFIG.messages.somethingWentWrong);
                                return;
                            }
                            if (data.data.paidProfiles.length > 1) {
                                // free & multi paid profile
                                TRIAL.showAndBuildProfiles(formEle, data.data.paidProfiles);
                                TRIAL.validatedFormFieldsValues[formName]['profileType'] = 'PAID';
                                TRIAL.validatedFormFieldsValues[formName]['isProfileOptionEnabled'] = true;
                                // calling show profile function
                            } else {
                                var profileDetails, params;
                                if (data.data.paidProfiles.length === 1) {
                                    // free & one paid profile
                                    profileDetails = data.data.paidProfiles[0];
                                    profileDetails.type = 'PAID';
                                    TRIAL.validatedFormFieldsValues[formName]['isGradeOptionEnabled'] = true;
                                } else if (data.data.freeProfiles.length === 1) {
                                    // free
                                    profileDetails = data.data.freeProfiles[0];
                                    profileDetails.type = 'FREE';
                                    TRIAL.validatedFormFieldsValues[formName]['isGradeOptionEnabled'] = true;
                                } else {
                                    UTILITIES.addToastMessage(5, CONFIG.messages.somethingWentWrong);
                                    return;
                                }
                                params = JSON.stringify({
                                    "userProfile": {
                                        "id": profileDetails['Profile-Id'],
                                        "name": profileDetails.name,
                                        "email": formFieldData.email,
                                        "type": profileDetails.type
                                    }
                                });
                                TRIAL.validatedFormFieldsValues[formName]['profileId'] = profileDetails.id;
                                TRIAL.validatedFormFieldsValues[formName]['profileType'] = profileDetails.type;
                                TRIAL.showAndBuildGrades(formEle, profileDetails);
                            }
                        },
                        error: function (err) {
                            formSubmitButton.attr('disabled', false)
                            formSubmitButton.html(formSubmitButton.attr('data-text'));
                            UTILITIES.addToastMessage(5, err.responseJSON && err.responseJSON.message ? err.responseJSON.message : CONFIG.messages.somethingWentWrong);

                            TRIAL.cleverTap('registration_form_submit_error');
                            // This will trigger when a registration api fails
                        }
                    });
                } else {
                    if (!formEle.find('[data-otp-input-field-voice-call-option]').is(':visible')) {
                        phoneInput.removeClass('input-error').addClass('input-error');
                        phoneInput.siblings('.input-error-msg').remove();
                        phoneInput.after('<div class="input-error-msg">Validate your mobile number</div>');
                    }

                    // otp validation message
                    var otpInputVoiceCallBlock = $('[data-otp-input-field-voice-call-option]');
                    if (otpInputVoiceCallBlock.is(':visible') && !otpInputVoiceCallBlock.find('input').val() && !otpInputVoiceCallBlock.find('input').siblings('.input-error-msg').length) {
                        otpInputVoiceCallBlock.find('input').after('<div class="input-error-msg">Enter 4 digit OTP</div>');
                    }
                }
            } else {
                var otpInputVoiceCallBlock = $('[data-otp-input-field-voice-call-option]');
                if (otpInputVoiceCallBlock.is(':visible') && !otpInputVoiceCallBlock.find('input').val() && !otpInputVoiceCallBlock.find('input').siblings('.input-error-msg').length) {
                    otpInputVoiceCallBlock.find('input').after('<div class="input-error-msg">Enter 4 digit OTP</div>');
                }
            }
        },

       
        showAndBuildGrades: function (formEle, data) {
            TRIAL.validatedFormFieldsValues['free-trial-classes']['isGradeOptionEnabled'] = true;
            var gradeSelector = formEle.find('[data-select-your-class]');

            function getItems(gradeData) {
                var itemsHtml = '';
                var tempGradeData = [];
                var tempInclusionGradeDisplayNameList = [];
                
                inclusionList.forEach(function (item, i) {
                    tempInclusionGradeDisplayNameList.push(item.toLowerCase().trim());
                });
                
                gradeData.forEach(function (item, i) {
                    if (tempInclusionGradeDisplayNameList.indexOf(item.displayName.toLowerCase().trim()) >= 0) {
                        tempGradeData.push(item);
                    }
                });
                var itemsHtml = '<option value="" disabled="" selected>Select your class</option>';              

                tempGradeData.forEach(function (item, i) {
                    // itemsHtml += '' +
                    //     '<div>' +
                    //     '<select data-grade-card-cta name="cohortId" data-grade="' + item.grade + '">' +
                    //     '<option data-grade-card-cta id="trial-grade-' + i + '" value="' + item.id + '" >Class <br />' + item.grade + '</option>' +
                    //     '</select>' +
                    //     '</div>' +
                    //     '';

                    itemsHtml += '' +
                        '<div>' +
                        '<select data-grade-card-cta>' +
                        '<option name="cohortId" data-grade="' + item.grade + '" data-grade-card-cta id="trial-grade-' + i + '" value="' + item.id + '" >Class <br />' + item.grade + '</option>' +
                        '</select>' +
                        '</div>' +
                        '';
                });
                itemsHtml += '' +'<option name="cohortId" data-grade="' + "IAS" + '" data-grade-card-cta id="128" value="' + "128" + '" ><br />' + "IAS" + '</option>'
                itemsHtml += '' +'<option name="cohortId" data-grade="' + "CAT" + '" data-grade-card-cta id="129" value="' + "129" + '" ><br />' + "CAT" + '</option>'
                itemsHtml += '' +'<option name="cohortId" data-grade="' + "GATE" + '" data-grade-card-cta id="127" value="' + "127" + '" ><br />' + "GATE" + '</option>'
                return '<div class="grades">' + itemsHtml + '</div>';
            }
            
            gradeSelector.find('[data-grades]').html(getItems(data.availableCohorts));
            TRIAL.carouselControlHandler('#trial-grades-carousel');
            gradeSelector.removeClass('hidden');
           TRIAL.signG(2400204,'View select your class');

            // on change of profile selection
            // jQuery('[data-grade-card-cta]').on('change', function () {
            gradeSelector.find('[data-grade-card-cta]').on('change', function () {

               TRIAL.signG(2400205,'Click select your class');
                
                var id = $(this).children("option:selected").val();   
                if (id) {
                    TRIAL.validatedFormFieldsValues['free-trial-classes']['cohortId'] = id;
                    TRIAL.validatedFormFieldsValues['free-trial-classes']['grade'] = $(this).children("option:selected").attr('data-grade');
                    gradeSelector.find('[data-grades]').removeClass('input-error').addClass('input-valid');
                    gradeSelector.find('[data-grades]').siblings('.input-error-msg').remove();

                    TRIAL.cleverTap('grade_selected'); // Once a user selects a grade on lead form
                }
            })
        },
        showAndBuildProfiles: function (formEle, data) {
            var profileSelector = formEle.find('[data-choose-your-profile]');
            var html = '' +
                '<div id="profiles-carousel" class="carousel slide profiles-carousel trial-item-carousel" data-ride="carousel" data-interval="false">' +
                '<div class="carousel-inner">' +
                getItems(data) +
                '</div>' +
                '<a class="left carousel-control hidden" href="#profiles-carousel" data-slide="prev">' +
                '<svg xmlns="https://www.w3.org/2000/svg" width="6.604" height="11.585" viewBox="0 0 6.604 11.585"><g transform="translate(103.744 -0.001) rotate(90)"><path d="M5.793,103.744a.809.809,0,0,1-.574-.237L.238,98.525a.811.811,0,0,1,1.147-1.147l4.407,4.408L10.2,97.378a.811.811,0,0,1,1.147,1.147l-4.981,4.981A.809.809,0,0,1,5.793,103.744Z" transform="translate(0 0)" /></g></svg>' +
                '</a>' +
                '<a class="right carousel-control ' + (data.length <= 3 ? 'hidden' : '') + '" href="#profiles-carousel" data-slide="next">' +
                '<svg xmlns="https://www.w3.org/2000/svg" width="6.604" height="11.585" viewBox="0 0 6.604 11.585"><g transform="translate(-97.141 11.586) rotate(-90)"><path d="M5.793,103.744a.809.809,0,0,1-.574-.237L.238,98.525a.811.811,0,0,1,1.147-1.147l4.407,4.408L10.2,97.378a.811.811,0,0,1,1.147,1.147l-4.981,4.981A.809.809,0,0,1,5.793,103.744Z" transform="translate(0 0)" /></g></svg>' +
                '</a>' +
                '</div>' +
                '';

            function getItems(data) {
                var itemsHtml = '';
                data.forEach(function (item, i) {
                    if (i % 3 === 0 && i !== 0) {
                        itemsHtml += '</div></div>';
                    }
                    if (i % 3 === 0 || i === 0) {
                        itemsHtml += '<div class="carousel-item item ' + (i === 0 ? "active" : "") + '"><div class="row profiles-row">';
                    }
                    itemsHtml += '' +
                        '<div class="col-xs-4 col-4">' +
                        '<div class="toggle-card">' +
                        '<input type="radio" id="toggle-card-' + item.id + '-' + i + '" name="profileId" value="' + item.id + '" data-profile-card-cta>' +
                        '<label for="toggle-card-' + item.id + '-' + i + '">' +
                        '<h4>' + item.name + '</h4>' +
                        '<p>' + item.displayName + '</p>' +
                        '</label>' +
                        '</div>' +
                        '</div>' +
                        '';
                    if (data.length - 1 === i) {
                        itemsHtml += '</div></div>';
                    }
                });

                return itemsHtml;
            }

            profileSelector.find('[data-profiles]').html(html);
            TRIAL.carouselControlHandler('#profiles-carousel')
            profileSelector.removeClass('hidden');

            // on change of profile selection
            profileSelector.find('[data-profile-card-cta]').on('change', function () {
                var id = $(this).attr('value');
                if ($(this).is(':checked')) {
                    TRIAL.showAndBuildGrades(formEle, (function () {                      
                        for (var i = 0; i < data.length; i++) {
                            if (data[i]['id'] === id) {
                                return data[i];
                            }
                        }
                    })());
                    TRIAL.validatedFormFieldsValues['free-trial-classes']['profileId'] = id;
                    profileSelector.find('[data-profiles]').removeClass('input-error').addClass('input-valid');
                    profileSelector.find('[data-profiles]').siblings('.input-error-msg').remove();

                    formEle.find('[data-select-your-class]').find('[data-grades]').removeClass('input-error')
                    formEle.find('[data-select-your-class]').find('[data-grades]').siblings('.input-error-msg').remove();

                    TRIAL.cleverTap('user_profile_selected'); // Once a user selects a user profile on lead form
                }

            })
        },

        timeSlots: {},
        showAndBuildTopicsAndSlots: function (formEle, data) {
            TRIAL.validatedFormFieldsValues['free-trial-classes']['isTopicOptionEnabled'] = true;
            var topicSelector = formEle.find('[data-choose-your-topic]');
            var timeSlotsWithId = {};
            var html = '' +
                '<div id="trial-topics-carousel" class="carousel slide topics-carousel trial-item-carousel" data-ride="carousel" data-interval="false">' +
                '<div class="carousel-inner">' +
                getItems(data) +
                '</div>' +
                '<a class="left carousel-control hidden" href="#trial-topics-carousel" data-slide="prev">' +
                '<svg xmlns="https://www.w3.org/2000/svg" width="6.604" height="11.585" viewBox="0 0 6.604 11.585"><g transform="translate(103.744 -0.001) rotate(90)"><path d="M5.793,103.744a.809.809,0,0,1-.574-.237L.238,98.525a.811.811,0,0,1,1.147-1.147l4.407,4.408L10.2,97.378a.811.811,0,0,1,1.147,1.147l-4.981,4.981A.809.809,0,0,1,5.793,103.744Z" transform="translate(0 0)" /></g></svg>' +
                '</a>' +
                '<a class="right carousel-control ' + (data.length <= 3 ? 'hidden' : '') + '" href="#trial-topics-carousel" data-slide="next">' +
                '<svg xmlns="https://www.w3.org/2000/svg" width="6.604" height="11.585" viewBox="0 0 6.604 11.585"><g transform="translate(-97.141 11.586) rotate(-90)"><path d="M5.793,103.744a.809.809,0,0,1-.574-.237L.238,98.525a.811.811,0,0,1,1.147-1.147l4.407,4.408L10.2,97.378a.811.811,0,0,1,1.147,1.147l-4.981,4.981A.809.809,0,0,1,5.793,103.744Z" transform="translate(0 0)" /></g></svg>' +
                '</a>' +
                '</div>' +
                '';

            function getItems(topicData) {
                var itemsHtml = '';
                topicData.forEach(function (item, i) {
                    if (i % 3 === 0 && i !== 0) {
                        itemsHtml += '</div></div>';
                    }
                    if (i % 3 === 0 || i === 0) {
                        itemsHtml += '<div class="carousel-item item ' + (i === 0 ? "active" : "") + '"><div class="row profiles-row">';
                    }
                    itemsHtml += '' +
                        '<div class="col-xs-4 col-4">' +
                        '<div class="toggle-card">' +
                        '<input type="radio" id="trial-topic-card-' + item.id + '-' + i + '" name="topicId" value="' + item.id + '" data-topic-card-cta data-courseId="' + item.courseId + '" data-cohortId="' + item.cohortId + '" data-name="' + item.name + '">' +
                        '<label for="trial-topic-card-' + item.id + '-' + i + '">' +
                        '<p>' + item.name + '</p>' +
                        '</label>' +
                        '</div>' +
                        '</div>' +
                        '';
                    if (topicData.length - 1 === i) {
                        itemsHtml += '</div></div>';
                    }
                    timeSlotsWithId[item.id] = {};
                    timeSlotsWithId[item.id] = item;
                });

                return itemsHtml;
            }

            topicSelector.find('[data-topics]').html(html);
            topicSelector.find('[data-topics]').removeClass('hidden');
            TRIAL.carouselControlHandler('#trial-topics-carousel');

            // on change of profile selection
            topicSelector.find('[data-topic-card-cta]').on('change', function () {
                if ($(this).is(':checked')) {
                    var topicId = $(this).attr('value');
                    TRIAL.validatedFormFieldsValues['free-trial-classes']['topicId'] = topicId;
                    TRIAL.validatedFormFieldsValues['free-trial-classes']['topicName'] = $(this).attr('data-name');

                    // resetting data
                    TRIAL.validatedFormFieldsValues['free-trial-classes']['slotId'] = '';
                    TRIAL.validatedFormFieldsValues['free-trial-classes']['startTime'] = '';
                    TRIAL.validatedFormFieldsValues['free-trial-classes']['endTime'] = '';
                    formEle.find('[data-time-slots]').removeClass('input-error')
                    formEle.find('[data-time-slots]').siblings('.input-error-msg').remove();

                    TRIAL.showAndSlotsBuilder(formEle, timeSlotsWithId[topicId]);

                    TRIAL.validatedFormFieldsValues['free-trial-classes']['courseId'] = $(this).attr('data-courseid');
                    topicSelector.find('[data-topics]').removeClass('input-error').addClass('input-valid');
                    topicSelector.find('[data-topics]').siblings('.input-error-msg').remove();

                    TRIAL.cleverTap('topic_selected'); // Once a user selects a class topic on lead form 2nd page
                }

            })
        },

        showAndSlotsBuilder: function (formEle, slots) {
            TRIAL.validatedFormFieldsValues['free-trial-classes']['isSlotOptionEnabled'] = true;
            var timeSlot = formEle.find('[data-time-slots]');
            var slotsHeaderHtml = '<ul role="tablist" class="tablist">';
            var morningHtml = '<div class="slot-time-section"><div class="slot-card-time"><img src="' + CDN + 'byjusweb/slot-icons/morning-slot-icon.svg" width="16" height="16"> Morning</div> <div>';
            var afternoonHtml = '<div class="slot-time-section"><div class="slot-card-time afternoon"><img src="' + CDN + 'byjusweb/slot-icons/afternoon-slot-icon.svg" width="16" height="16"> Afternoon</div> <div>';
            var eveningHtml = '<div class="slot-time-section"><div class="slot-card-time evening"><img src="' + CDN + 'byjusweb/slot-icons/evening-slot-icon.svg" width="16" height="16"> Evening</div> <div>';

            var categorizedSlots = {
                'today': [],
                'todayHours': [],
                'todayMinutes': [],
                'tomorrow': [],
                'tomorrowHours': [],
                'tomorrowMinutes': [],
                'dayAfter': [],
                'dayAfterHours': [],
                'dayAfterMinutes': [],
            };

            var todaysCount = 0,
                tomorrowCount = 0,
                dayAfterCount = 0;
            slots.slots.forEach(function (item, i) {
                if (item.category === 'today') {
                    todaysCount++;
                }
                if (item.category === 'tomorrow') {
                    tomorrowCount++;
                }
                if (item === 'dayAfter') {
                    dayAfterCount++;
                }
                item.isBogusSlot = false;
                categorizedSlots[item.category].push(item); // categorizing slots wrt days
                categorizedSlots[item.category + 'Hours'].push(parseInt(item.hour)); // getting hour, minutes
                categorizedSlots[item.category + 'Minutes'].push(parseInt(item.minutes)); // getting hour, minutes
            });

            // get temp dummy slot for the first time
            var tempBogusSlot = {};
            var selectedCategory = '';
            if (categorizedSlots.today.length) {
                selectedCategory = 'today';
            } else if (categorizedSlots.tomorrow.length) {
                selectedCategory = 'tomorrow';
            } else if (categorizedSlots.dayAfter.length) {
                selectedCategory = 'dayAfter';
            }
            for (var key in categorizedSlots[selectedCategory][0]) {
                tempBogusSlot[key] = categorizedSlots[selectedCategory][0][key];
            }

            // get hour andMinutes
            var selectedHours = [];
            categorizedSlots[selectedCategory + 'Hours'].forEach(function (item) {
                if (selectedHours.indexOf(item) === -1) selectedHours.push(item)
            });

            var tempSlots = []; // copying array with no same reference
            if (typeof (fixedSlotsForBogus) !== 'undefined' && fixedSlotsForBogus && fixedSlotsForBogus.afternoon && fixedSlotsForBogus.evening && fixedSlotsForBogus.morning) { // if this is exist
                if (tempBogusSlot && getBogusHour()) {
                    tempBogusSlot.isBogusSlot = true;
                    tempBogusSlot.slot_group_id = 11111111111111;
                    tempBogusSlot.slot_id = 11111111111111;
                    tempBogusSlot.hour = getBogusHour();
                    tempBogusSlot.minutes = '00';
                    tempBogusSlot.meridiem = getBogusMeridiem();

                    // counter increment + adding bogus slot
                    if (selectedCategory === 'today') {
                        todaysCount++;
                        tempSlots = tempSlots.concat(TRIAL.sortBasedTime(categorizedSlots['today'].concat([tempBogusSlot])), categorizedSlots['tomorrow'], categorizedSlots['dayAfter']);
                    } else if (selectedCategory === 'tomorrow') {
                        tomorrowCount++;
                        tempSlots = tempSlots.concat(categorizedSlots['today'], TRIAL.sortBasedTime(categorizedSlots['tomorrow'].concat([tempBogusSlot])), categorizedSlots['dayAfter']);
                    } else {
                        dayAfterCount++;
                        tempSlots = tempSlots.concat(categorizedSlots['today'], categorizedSlots['tomorrow'], TRIAL.sortBasedTime(categorizedSlots['dayAfter'].concat([tempBogusSlot])));
                    }
                } else {
                    tempSlots = slots.slots;
                }

                function getBogusHour() {
                    var bogusHour = '';
                    var flag = true;
                    fixedSlotsForBogus[tempBogusSlot.subCategory].forEach(function (item, i) {
                        if (selectedHours.indexOf(item) === -1 && flag) {
                            bogusHour = item.toString().length < 2 ? '0' + item : item;
                            flag = false;
                        }
                    });
                    return bogusHour ? bogusHour.toString() : '';
                }

                function getBogusMeridiem() {
                    // based on fixedSlotsForBogus set
                    switch (tempBogusSlot.subCategory) {
                        case 'morning':
                            return 'AM';
                            break;
                        case 'afternoon':
                        case 'evening':
                            return 'PM';
                            break;
                        default:
                            return 'PM'
                    }
                }
            } else {
                tempSlots = slots.slots;
            }

            var slotsTabsHtml = '';
            var todayMorningHtml = '',
                todayAfternoonHtml = '',
                todayEveningHtml = '';
            var tomorrowMorningHtml = '',
                tomorrowAfternoonHtml = '',
                tomorrowEveningHtml = '';
            var dayAfterMorningHtml = '',
                dayAfterAfternoonHtml = '',
                dayAfterEveningHtml = '';

            var dayAfterCounter = 0,
                todaysCounter = 0,
                tomorrowCounter = 0;
            tempSlots.forEach(function (item, i) {
                if (item.category === 'today') {
                    if (todaysCounter === 0) {
                        slotsTabsHtml += '<div role="tabpanel" class="tab-pane ' + (!tomorrowCounter && !dayAfterCounter ? 'active' : '') + '" id="time-slot-0">';
                        slotsHeaderHtml += '<li role="presentation" class="' + (!tomorrowCounter && !dayAfterCounter ? 'active' : '') + '"><span class="badge"><img src="' + CDN + 'byjusweb/slot-icons/fast-tag-icon.svg" width="8"  height="3">Filling Fast</span><a href="#time-slot-0" aria-controls="home" role="tab" data-toggle="tab">Today, <b>' + item.categoryDate + '</b></a></li>';
                    }
                    if (item.subCategory === 'morning') {
                        todayMorningHtml += TRIAL.buildSlotCard(item);
                    } else if (item.subCategory === 'afternoon') {
                        todayAfternoonHtml += TRIAL.buildSlotCard(item);
                    } else {
                        todayEveningHtml += TRIAL.buildSlotCard(item);
                    }
                    todaysCounter++;
                    if (todaysCount === todaysCounter) {
                        if (todayMorningHtml) {
                            slotsTabsHtml += morningHtml + todayMorningHtml + '</div></div>';
                        }
                        if (todayAfternoonHtml) {
                            slotsTabsHtml += afternoonHtml + todayAfternoonHtml + '</div></div>';
                        }
                        if (todayEveningHtml) {
                            slotsTabsHtml += eveningHtml + todayEveningHtml + '</div></div>'
                        }
                        slotsTabsHtml += '</div>'; // closing tab panel
                    }
                } else if (item.category === 'tomorrow') {
                    if (tomorrowCounter === 0) {
                        slotsTabsHtml += '<div role="tabpanel" class="tab-pane ' + (!todaysCounter && !dayAfterCounter ? 'active' : '') + '" id="time-slot-1">';
                        slotsHeaderHtml += '<li role="presentation" class="' + (!todaysCounter && !dayAfterCounter ? 'active' : '') + '"><a href="#time-slot-1" aria-controls="home" role="tab" data-toggle="tab">Tomorrow, <b>' + item.categoryDate + '</b></a></li>';
                    }
                    if (item.subCategory === 'morning') {
                        tomorrowMorningHtml += TRIAL.buildSlotCard(item);
                    } else if (item.subCategory === 'afternoon') {
                        tomorrowAfternoonHtml += TRIAL.buildSlotCard(item);
                    } else {
                        tomorrowEveningHtml += TRIAL.buildSlotCard(item);
                    }
                    tomorrowCounter++;
                    if (tomorrowCount === tomorrowCounter) {
                        if (tomorrowMorningHtml) {
                            slotsTabsHtml += morningHtml + tomorrowMorningHtml + '</div></div>';
                        }
                        if (tomorrowAfternoonHtml) {
                            slotsTabsHtml += afternoonHtml + tomorrowAfternoonHtml + '</div></div>';
                        }
                        if (tomorrowEveningHtml) {
                            slotsTabsHtml += eveningHtml + tomorrowEveningHtml + '</div></div>'
                        }
                        slotsTabsHtml += '</div>'; // closing tab panel
                    }
                } else if (item.category === 'dayAfter') {
                    if (dayAfterCounter === 0) {
                        slotsTabsHtml += '<div role="tabpanel" class="tab-pane ' + (!todaysCounter && !tomorrowCounter ? 'active' : '') + '" id="time-slot-2">';
                        slotsHeaderHtml += '<li role="presentation" class="' + (!todaysCounter && !tomorrowCounter ? 'active' : '') + '"><a href="#time-slot-2" aria-controls="home" role="tab" data-toggle="tab"><b>' + item.categoryDate + '</b></a></li>';
                    }
                    if (item.subCategory === 'morning') {
                        dayAfterMorningHtml += TRIAL.buildSlotCard(item);
                    } else if (item.subCategory === 'afternoon') {
                        dayAfterAfternoonHtml += TRIAL.buildSlotCard(item);
                    } else {
                        dayAfterEveningHtml += TRIAL.buildSlotCard(item);
                    }
                    dayAfterCounter++;
                    if (dayAfterCount === dayAfterCounter) {
                        if (dayAfterMorningHtml) {
                            slotsTabsHtml += morningHtml + dayAfterMorningHtml + '</div></div>';
                        }
                        if (dayAfterAfternoonHtml) {
                            slotsTabsHtml += afternoonHtml + dayAfterAfternoonHtml + '</div></div>';
                        }
                        if (dayAfterEveningHtml) {
                            slotsTabsHtml += eveningHtml + dayAfterEveningHtml + '</div></div>'
                        }
                        slotsTabsHtml += '</div>'; // closing tab panel
                    }
                } else {
                    slotsTabsHtml = '';
                }
            });

            timeSlot.html(slotsHeaderHtml + '</ul>' + '<div class="tab-content">' + slotsTabsHtml + '</div>');
            timeSlot.removeClass('hidden');
            timeSlot.find('[data-time-slots-title]').removeClass('hidden');

            formEle.find('[data-slot-cta]').on('change', function () {
                TRIAL.validatedFormFieldsValues['free-trial-classes']['slotId'] = $(this).attr('data-slotid');
                TRIAL.validatedFormFieldsValues['free-trial-classes']['startTime'] = $(this).attr('data-start');
                TRIAL.validatedFormFieldsValues['free-trial-classes']['endTime'] = $(this).attr('data-end');

                timeSlot.removeClass('input-error').addClass('input-valid');
                timeSlot.siblings('.input-error-msg').remove();

                TRIAL.cleverTap('slot_selected'); // Once a user selects a time slot on lead form
            });

            //  tab events
            timeSlot.find('[data-toggle="tab"]').on('click', function (e) {
                e.preventDefault();
                $(this).parent().siblings().removeClass('active');
                $(this).parent().addClass('active');
                $(this).removeClass('active');

                var tabId = $(this).attr('href');
                $(tabId).siblings().removeClass('active');
                $(tabId).addClass('active');
            })
        },

        buildSlotCard: function (cardData) {
            return '<div class="slot-card ' + (cardData.isBogusSlot ? "full" : "") + '">' +
                ' <input type="radio" id="trial-slot-card-' + cardData.slot_id + '" name="slotTime" data-start="' + cardData.start_time + '" data-end="' + cardData.end_time + '" data-slotId="' + cardData.slot_id + '" data-slot-cta ' + (cardData.isBogusSlot ? "disabled" : "") + '>' +
                '<label for="trial-slot-card-' + cardData.slot_id + '">' + cardData.hour + ':' + cardData.minutes + ' ' + cardData.meridiem.toUpperCase() + '</label>' +
                '</div>';
        },

        carouselControlHandler: function (carousalId) {
            var items = $(carousalId).find('.item');
            var leftControl = $(carousalId).find('.left.carousel-control');
            var rightControl = $(carousalId).find('.right.carousel-control');
            $(carousalId).on('slid.bs.carousel', function () {
                if (TRIAL.findIndexOfElements(items, 'active') === 0) {
                    leftControl.addClass('hidden');
                    rightControl.removeClass('hidden');
                } else if (TRIAL.findIndexOfElements(items, 'active') === items.length - 1) {
                    rightControl.addClass('hidden');
                    leftControl.removeClass('hidden');
                } else {
                    rightControl.removeClass('hidden');
                    leftControl.removeClass('hidden');
                }
            })
        },

        setStates: function (stateSelector) {
            // setting state
            $.get(CONFIG.apis.allStatesUnderIndia, function (data, status, xhr) {
                if (xhr.status === 200) {
                    var optionsHtml = '<option value="" disabled="" selected>State</option>';
                    data && data.statusText != "error" && data.forEach(function (item, i) {
                        optionsHtml += '<option value="' + item.state + '">' + item.state + '</option>'
                    })
                    stateSelector.html(optionsHtml);
                } else {
                    UTILITIES.addToastMessage(0, CONFIG.messages.somethingWentWrong);
                }
            });
        }
    };

    //  on load ----

    // all input field validation
    $('form').each(function (i, ele) {
        TRIAL.validateFormFields($(ele).attr('name'), 'onInput');
        // on input first time call
    });

    TRIAL.setStates($('[data-state]'));
    // set states
    TRIAL.registration('free-trial-classes');

    $('[name="viewport"]').attr('content', 'width=device-width, initial-scale=1, user-scalable=0'); // fixing zoom issue on iphone mobile

    // to make input fields empty
    $('form').each(function (i, ele) {
        $(ele).attr.value='';
    });
})($);